//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NDOnlineGym_2017.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebServiceSoap")]
    public interface WebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDevices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDevices", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCompanyList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCompanyList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCompanyList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoRecalculateAttendance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AutoRecalculateAttendance(string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoRecalculateAttendance", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AutoRecalculateAttendanceAsync(string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssignEmployeeOutDoorEntries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AssignEmployeeOutDoorEntries(string EmployeeCode, string FromDate, string ToDate, string BeginTime, string EndTime, int IsApproved, string ApprovedBy, string OutDoorType, string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssignEmployeeOutDoorEntries", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AssignEmployeeOutDoorEntriesAsync(string EmployeeCode, string FromDate, string ToDate, string BeginTime, string EndTime, int IsApproved, string ApprovedBy, string OutDoorType, string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsEmployeeCodeAlreadyExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsEmployeeCodeAlreadyExists(string EmployeeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsEmployeeCodeAlreadyExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsEmployeeCodeAlreadyExistsAsync(string EmployeeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UploadUser(string EmployeeCode, string EmployeeName, string Privilege, string FPIndex, string BioPassword, string CardNumber, string FPTemplate, string SerialNumbers, string DeviceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadUser", ReplyAction="*")]
        System.Threading.Tasks.Task UploadUserAsync(string EmployeeCode, string EmployeeName, string Privilege, string FPIndex, string BioPassword, string CardNumber, string FPTemplate, string SerialNumbers, string DeviceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddDeviceLogs_InsertIntoDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddDeviceLogs_InsertIntoDB(string SN, string EnrollNumber, string strLogDate, string InOutMode, string Workcode, string StatusCode, string Direction, string VerifyMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddDeviceLogs_InsertIntoDB", ReplyAction="*")]
        System.Threading.Tasks.Task AddDeviceLogs_InsertIntoDBAsync(string SN, string EnrollNumber, string strLogDate, string InOutMode, string Workcode, string StatusCode, string Direction, string VerifyMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEditEmployee", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddEditEmployee(
                    string APIKey, 
                    string EmployeeCode, 
                    string EmployeeCodeInDevice, 
                    string CompanySName, 
                    string DepartmentSName, 
                    string Designation, 
                    string DOB, 
                    string DOC, 
                    string DOJ, 
                    string DOR, 
                    string Email, 
                    string EmployementType, 
                    string Status, 
                    string Team, 
                    string Grade, 
                    string Location, 
                    string EmployeeName, 
                    string Gender, 
                    string UIDNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEditEmployee", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddEditEmployeeAsync(
                    string APIKey, 
                    string EmployeeCode, 
                    string EmployeeCodeInDevice, 
                    string CompanySName, 
                    string DepartmentSName, 
                    string Designation, 
                    string DOB, 
                    string DOC, 
                    string DOJ, 
                    string DOR, 
                    string Email, 
                    string EmployementType, 
                    string Status, 
                    string Team, 
                    string Grade, 
                    string Location, 
                    string EmployeeName, 
                    string Gender, 
                    string UIDNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEmployee", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddEmployee(string APIKey, string EmployeeCode, string EmployeeName, string CardNumber, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEmployee", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddEmployeeAsync(string APIKey, string EmployeeCode, string EmployeeName, string CardNumber, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteUser(string APIKey, string EmployeeCode, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteUserAsync(string APIKey, string EmployeeCode, string SerialNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlockUnblockUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string BlockUnblockUser(string APIKey, string EmployeeCode, string SerialNumber, bool IsBlock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BlockUnblockUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> BlockUnblockUserAsync(string APIKey, string EmployeeCode, string SerialNumber, bool IsBlock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEmployee", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteEmployee(string EmployeeCodeInDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteEmployee", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteEmployeeAsync(string EmployeeCodeInDevice);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceSoapChannel : NDOnlineGym_2017.ServiceReference1.WebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<NDOnlineGym_2017.ServiceReference1.WebServiceSoap>, NDOnlineGym_2017.ServiceReference1.WebServiceSoap {
        
        public WebServiceSoapClient() {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public System.Data.DataTable GetDevices() {
            return base.Channel.GetDevices();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDevicesAsync() {
            return base.Channel.GetDevicesAsync();
        }
        
        public System.Data.DataTable GetCompanyList() {
            return base.Channel.GetCompanyList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyListAsync() {
            return base.Channel.GetCompanyListAsync();
        }
        
        public bool AutoRecalculateAttendance(string FromDate, string ToDate) {
            return base.Channel.AutoRecalculateAttendance(FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<bool> AutoRecalculateAttendanceAsync(string FromDate, string ToDate) {
            return base.Channel.AutoRecalculateAttendanceAsync(FromDate, ToDate);
        }
        
        public string AssignEmployeeOutDoorEntries(string EmployeeCode, string FromDate, string ToDate, string BeginTime, string EndTime, int IsApproved, string ApprovedBy, string OutDoorType, string Remarks) {
            return base.Channel.AssignEmployeeOutDoorEntries(EmployeeCode, FromDate, ToDate, BeginTime, EndTime, IsApproved, ApprovedBy, OutDoorType, Remarks);
        }
        
        public System.Threading.Tasks.Task<string> AssignEmployeeOutDoorEntriesAsync(string EmployeeCode, string FromDate, string ToDate, string BeginTime, string EndTime, int IsApproved, string ApprovedBy, string OutDoorType, string Remarks) {
            return base.Channel.AssignEmployeeOutDoorEntriesAsync(EmployeeCode, FromDate, ToDate, BeginTime, EndTime, IsApproved, ApprovedBy, OutDoorType, Remarks);
        }
        
        public bool IsEmployeeCodeAlreadyExists(string EmployeeCode) {
            return base.Channel.IsEmployeeCodeAlreadyExists(EmployeeCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmployeeCodeAlreadyExistsAsync(string EmployeeCode) {
            return base.Channel.IsEmployeeCodeAlreadyExistsAsync(EmployeeCode);
        }
        
        public void UploadUser(string EmployeeCode, string EmployeeName, string Privilege, string FPIndex, string BioPassword, string CardNumber, string FPTemplate, string SerialNumbers, string DeviceIds) {
            base.Channel.UploadUser(EmployeeCode, EmployeeName, Privilege, FPIndex, BioPassword, CardNumber, FPTemplate, SerialNumbers, DeviceIds);
        }
        
        public System.Threading.Tasks.Task UploadUserAsync(string EmployeeCode, string EmployeeName, string Privilege, string FPIndex, string BioPassword, string CardNumber, string FPTemplate, string SerialNumbers, string DeviceIds) {
            return base.Channel.UploadUserAsync(EmployeeCode, EmployeeName, Privilege, FPIndex, BioPassword, CardNumber, FPTemplate, SerialNumbers, DeviceIds);
        }
        
        public void AddDeviceLogs_InsertIntoDB(string SN, string EnrollNumber, string strLogDate, string InOutMode, string Workcode, string StatusCode, string Direction, string VerifyMode) {
            base.Channel.AddDeviceLogs_InsertIntoDB(SN, EnrollNumber, strLogDate, InOutMode, Workcode, StatusCode, Direction, VerifyMode);
        }
        
        public System.Threading.Tasks.Task AddDeviceLogs_InsertIntoDBAsync(string SN, string EnrollNumber, string strLogDate, string InOutMode, string Workcode, string StatusCode, string Direction, string VerifyMode) {
            return base.Channel.AddDeviceLogs_InsertIntoDBAsync(SN, EnrollNumber, strLogDate, InOutMode, Workcode, StatusCode, Direction, VerifyMode);
        }
        
        public string AddEditEmployee(
                    string APIKey, 
                    string EmployeeCode, 
                    string EmployeeCodeInDevice, 
                    string CompanySName, 
                    string DepartmentSName, 
                    string Designation, 
                    string DOB, 
                    string DOC, 
                    string DOJ, 
                    string DOR, 
                    string Email, 
                    string EmployementType, 
                    string Status, 
                    string Team, 
                    string Grade, 
                    string Location, 
                    string EmployeeName, 
                    string Gender, 
                    string UIDNo) {
            return base.Channel.AddEditEmployee(APIKey, EmployeeCode, EmployeeCodeInDevice, CompanySName, DepartmentSName, Designation, DOB, DOC, DOJ, DOR, Email, EmployementType, Status, Team, Grade, Location, EmployeeName, Gender, UIDNo);
        }
        
        public System.Threading.Tasks.Task<string> AddEditEmployeeAsync(
                    string APIKey, 
                    string EmployeeCode, 
                    string EmployeeCodeInDevice, 
                    string CompanySName, 
                    string DepartmentSName, 
                    string Designation, 
                    string DOB, 
                    string DOC, 
                    string DOJ, 
                    string DOR, 
                    string Email, 
                    string EmployementType, 
                    string Status, 
                    string Team, 
                    string Grade, 
                    string Location, 
                    string EmployeeName, 
                    string Gender, 
                    string UIDNo) {
            return base.Channel.AddEditEmployeeAsync(APIKey, EmployeeCode, EmployeeCodeInDevice, CompanySName, DepartmentSName, Designation, DOB, DOC, DOJ, DOR, Email, EmployementType, Status, Team, Grade, Location, EmployeeName, Gender, UIDNo);
        }
        
        public string AddEmployee(string APIKey, string EmployeeCode, string EmployeeName, string CardNumber, string SerialNumber) {
            return base.Channel.AddEmployee(APIKey, EmployeeCode, EmployeeName, CardNumber, SerialNumber);
        }
        
        public System.Threading.Tasks.Task<string> AddEmployeeAsync(string APIKey, string EmployeeCode, string EmployeeName, string CardNumber, string SerialNumber) {
            return base.Channel.AddEmployeeAsync(APIKey, EmployeeCode, EmployeeName, CardNumber, SerialNumber);
        }
        
        public string DeleteUser(string APIKey, string EmployeeCode, string SerialNumber) {
            return base.Channel.DeleteUser(APIKey, EmployeeCode, SerialNumber);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserAsync(string APIKey, string EmployeeCode, string SerialNumber) {
            return base.Channel.DeleteUserAsync(APIKey, EmployeeCode, SerialNumber);
        }
        
        public string BlockUnblockUser(string APIKey, string EmployeeCode, string SerialNumber, bool IsBlock) {
            return base.Channel.BlockUnblockUser(APIKey, EmployeeCode, SerialNumber, IsBlock);
        }
        
        public System.Threading.Tasks.Task<string> BlockUnblockUserAsync(string APIKey, string EmployeeCode, string SerialNumber, bool IsBlock) {
            return base.Channel.BlockUnblockUserAsync(APIKey, EmployeeCode, SerialNumber, IsBlock);
        }
        
        public string DeleteEmployee(string EmployeeCodeInDevice) {
            return base.Channel.DeleteEmployee(EmployeeCodeInDevice);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEmployeeAsync(string EmployeeCodeInDevice) {
            return base.Channel.DeleteEmployeeAsync(EmployeeCodeInDevice);
        }
    }
}
